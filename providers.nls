breed [ providers provider ]
providers-own
[
  profile;
  mu-perf;;perfomance moyenne 
  sig-perf;;ecart type
]

to init-provider [prof]
  set color red
  random-position
  set profile prof
  param-profile-provider  
  set history-index 0
  ;;set rating-history array:from-list n-values history-size [0]
  ;;set rating-history array:from-list n-values history-size [0]
  ;set trust-model? false
  set rating-history n-values history-size [[0 0 0]]
  random-position
end

to param-profile-provider
  if profile = GOOD
  [
    set mu-perf (PL_GOOD + random (PL_PERFECT - PL_GOOD))
    set sig-perf sig_good
  ]
  if profile = ORDINARY
  [
    set mu-perf (PL_OK + random (PL_GOOD - PL_OK))
    set sig-perf sig_ordinary
  ]
  if profile = BAD
  [
    set mu-perf (PL_WORST + random (PL_OK - PL_WORST))
    set sig-perf sig_bad
  ]
end

to-report performance-provider [dist] ;;determine the performance of a provider
  let utility 0
  ifelse profile = INTERMITTENT ;; define performance regarding the profile
  [set utility (PL_BAD + random (PL_GOOD - PL_BAD))]
  [set utility random-normal mu-perf sig-perf]
  if  dist > radius-of-operation ;; take into acount degradation if the consumer is outside of provider area
  [set utility utility - (dist - radius-of-operation) * degradation]
  if utility < -10
  [set utility -10]
  if utility > 10
  [set utility 10]
  report utility
end

to behaviour-update-provider
  if random-float 1.0 < p-muC
  [set mu-perf (mu-perf - M + random (2 * M))]
  if random-float 1.0 < p-profile-switch
  [set profile ((profile + 1 + random 3) mod 4)]
  param-profile-provider
end

to store-rating-provider [ id v t ]
  ;;#########################"
  
  let index 0
  ifelse history-index < history-size - 1
  [    
    set index history-index 
    set history-index history-index + 1
  ]
  [
    let min-v 10
    let i 0
    foreach rating-history
    [
      rate ->
      if item 2 rate < min-v
      [
        set min-v (item 2 rate)
        set index i
      ]
      set i (i + 1)
    ]
  ]
  set rating-history replace-item index rating-history [0 0 0];; init the rating slot.
  set rating-history (replace-item index rating-history
                  (replace-item 0 (item index rating-history) id));;set the id of the selected provider
  set rating-history (replace-item index rating-history
                  (replace-item 1 (item index rating-history) (v / 10)));;set the UG of the deal
  set rating-history (replace-item index rating-history
                  (replace-item 2 (item index rating-history) t));;set the time of the deal
  ;print rating-history
  ;;#########################"
end