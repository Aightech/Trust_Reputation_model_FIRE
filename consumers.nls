breed [ consumers consumer ]

consumers-own
[
  activity;;alpha
  rating-history;;
  trust-model?
]

to init-consumer
  set color blue
  set activity random-float (max-activity-consumers - min-activity-consumers) + min-activity-consumers 
  set rating-history array:from-list n-values history-size [0]
  set trust-model? false
  random-position
  
end

to ask-service-consumer
  if random-float 1.0 < activity
  [
    ;;getProviders:list of 
    let nearest-providers min-n-of 10 providers [distance myself];; TODO 10 ?
    ifelse not trust-model?
    [
      ask one-of nearest-providers 
      [let utility performance-provider 0];; TODO distance
    ]
    [
      ;;TODO
      
      ;;Tk=sum(wk(ri).vi)/sum(wk(ri)
      ;;w=exp(-dt/lambda)
      ;;=sum(exp(-t(ri)/lambda).v(ri)) / sum(exp(-t(ri)/lambda))
      
      ;;extract[L,b]: return a list of all the transaction done with b 
      
      ;;[p1 p2 p3 p4]
      
      ;;getInteraction :
      ;;[r1(p1,0.1,t1), r2(p1,0.2,t2), r3(p2,0.2,t3), r4(p3,0.3,t4)] 
      ;;[Ti_p1 Ti_p2 Ti_p3 Ti_p4=-1000]
      
      ;;getReview :
      ;;[r1(p2,0.1,t1), r2(p1,0.2,t2), r3(p2,0.2,t3), r4(p4,0.3,t4)] 
      ;;[Ti_p1 Ti_p2 Ti_p3 Ti_p4=-1000]
      
       
      ;;getReview
      ;;getReputation
      
      ;;Tinteraction
      ;extract[L,b]: return a list of all the transaction done with b 
      ;;=sum(exp(-t(ri)/lambda).v(ri)) / sum(exp(-t(ri)/lambda))
      
      
      ;;X_Trole_based_X
      ;;Twitness
      ;;Tcertified
      
      
      
      ;;T=sum(Tk.wk)/sum(wk)
    ]
  ]
end