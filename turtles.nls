turtles-own
[
  ;;position variables;;
  r
  phi
  theta
  ;;;;--------------;;;;
  rating-history;;
  history-index
  acquaintances
]

to random-position
  set size 0.05
  set r 1
  set phi random 360;;
  set theta random 180;;
  setxyz  r * sin(phi) * cos(theta) r * sin(phi) * sin(theta) r * cos(phi)
end

to move
  if breed = consumers[
    if random-float 1 < p-cons-move [
      set phi phi + angle-max - random-float (2 * angle-max)
      set theta theta + angle-max - random-float (2 * angle-max)
    ]
  ]
  if breed = providers[
    if random-float 1 < p-prov-move [
      set phi phi + angle-max - random-float (2 * angle-max)
      set theta theta + angle-max - random-float (2 * angle-max)
    ]
  ]
  setxyz  r * sin(phi) * cos(theta) r * sin(phi) * sin(theta) r * cos(phi)
  ;;print drawing-r0
  if drawing-r0 = true and who = 0
  [
    draw-operation-radius
    pu
    setxyz  r * sin(phi) * cos(theta) r * sin(phi) * sin(theta) r * cos(phi)
  ]
end

to draw-operation-radius
  let i 0
  let a asin(radius-of-operation)
  pu 
  setxyz r * (cos(theta) * cos(phi) * sin(a) * sin(i) + cos(theta) * sin(phi) * cos(a) - sin(theta) * sin(a) * cos(i)) r * (sin(theta) * cos(phi) * sin(a) * sin(i) + sin(theta) * sin(phi) * cos(a) + cos(theta) * sin(a) * cos(i)) r * (cos(phi) * cos(a) - sin(phi) * sin(a) * sin(i))
  pd
  loop [
    if i > 360 [ stop ]
    setxyz r * (cos(theta) * cos(phi) * sin(a) * sin(i) + cos(theta) * sin(phi) * cos(a) - sin(theta) * sin(a) * cos(i)) r * (sin(theta) * cos(phi) * sin(a) * sin(i) + sin(theta) * sin(phi) * cos(a) + cos(theta) * sin(a) * cos(i)) r * (cos(phi) * cos(a) - sin(phi) * sin(a) * sin(i))
    set i i + 1
  ]
  pu
end

to set-acquaintances
   set acquaintances other turtles in-radius (2 * asin((radius-of-operation) / 2) * pi / 180)
end

